#!/usr/bin/env bash
# This script will create the bootstrapping tarball that packages need
# to use npm3. This means we don't need to store a binary tarball in
# source control.
#
# Usage:
# $ ./gen_npm3      # Generate in a temporary directory
# $ TMPDIR=/path/to/tmpdir ./gen_npm3
#
# Optional environment variables:
# set BUILD_NPM3 to a non-empty value to also do a nix-build of the generated
# npm3 expression.
#
# $ BUILD_NPM3=yes ./gen_npm3
#
# set NPM3_NIX_PATH to a non-empty value in order to make a custom NIX_PATH
# for the test builds.

set -e

[[ -z $TMPDIR ]] && export TMPDIR=/tmp
BUILD=$(mktemp -d $TMPDIR/nixfromnpm-build-XXXX)
[[ -z $OUTPUT ]] && OUTPUT=$(mktemp -d $TMPDIR/gen-npm3-XXXX)

[[ -z $NIXFROMNPM ]] && {
  # CD into the directory of this file and echo the current directory.
  _current_path=$(cd $(dirname $0); pwd)
  # Then set the NIXFROMNPM folder to be that directory's parent.
  export NIXFROMNPM=$(dirname $_current_path)
}

TARBALL=$NIXFROMNPM/nix-libs/nodeLib/npm3.tar.gz

build_nixfromnpm() (
  cd $BUILD
  nix-build $NIXFROMNPM
)

fetch_npm3_nix() {
  # Generate output with nixfromnpm
  $BUILD/result/bin/nixfromnpm -p npm%3 -o $OUTPUT
}

do_nix_build() (
  [[ -z $NPM3_NIX_PATH ]] || export NIX_PATH=$NPM3_NIX_PATH
  local cmd="nix-build $OUTPUT -A nodePackages.npm
             --arg npm3 false"
  echo $cmd $@
  $cmd $@
)

# Create the npm3.tar.gz
gen_npm3_tarball() (
  cd $OUTPUT && tar -cf $TARBALL \
    --exclude=./nodeLib/npm3.tar.gz \
    .
)

echo "Building nixfromnpm..."
build_nixfromnpm
echo "Fetching package definitions in $OUTPUT..."
fetch_npm3_nix
echo "Doing a dry-run to test dependencies are satisfied..."
do_nix_build --dry-run
[[ -z $BUILD_NPM3 ]] || {
  echo "Building npm3..."
  do_nix_build --no-out-link
}
echo "Generating tarball in $TARBALL..."
gen_npm3_tarball
echo "Done! Tarball is in $TARBALL"
rm -rf $OUTPUT
rm -rf $BUILD
